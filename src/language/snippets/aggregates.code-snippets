// https://www.ibm.com/docs/en/i/7.3?topic=functions-aggregate
{
  "array_agg": {
    "prefix": "array_agg",
    "body": "array_agg(${1:expression} ORDER BY ${2:sort-key-expression} ${3|ASC,DESC|})",
    "description": "The ARRAY_AGG function aggregates a set of elements into an array."
  },
  "avg": {
    "prefix": "avg",
    "body": "avg(${1|ALL,DISTINCT|} ${2:numeric-expression})",
    "description": "The AVG function returns the average of a set of numbers."
  }, 
  "correlation": {
    "prefix": "correlation",
    "body": "correlation(${1:expression}, ${2:expression})",
    "description": "The CORRELATION function returns the coefficient of correlation of a set of number pairs."
  }, 
  "corr": {
    "prefix": "corr",
    "body": "corr(${1:expression}, ${2:expression})",
    "description": "The CORR function returns the coefficient of correlation of a set of number pairs."
  }, 
  "count": {
    "prefix": "count",
    "body": "count(${1|ALL,DISTINCT|} ${2:expression})",
    "description": "The COUNT function returns the number of rows or values in a set of rows or values."
  }, 
  "count_big": {
    "prefix": "count_big",
    "body": "count_big(${1|ALL,DISTINCT|} ${2:expression})",
    "description": "The COUNT_BIG function returns the number of rows or values in a set of rows or values. It is similar to COUNT except that the result can be greater than the maximum value of integer."
  }, 
  "covariance": {
    "prefix": "covariance",
    "body": "covariance(${1:expression}, ${2:expression})",
    "description": "The COVARIANCE function returns the (population) covariance of a set of number pairs."
  },
  "covar": {
    "prefix": "covar",
    "body": "covar(${1:expression}, ${2:expression})",
    "description": "The COVAR function returns the (population) covariance of a set of number pairs."
  },   
  "covariance_samp": {
    "prefix": "covariance_samp",
    "body": "covariance_samp(${1:expression}, ${2:expression})",
    "description": "The COVARIANCE_SAMP function returns the unbiased sample covariance (n-1) of a set of number pairs."
  },
  "covar_samp": {
    "prefix": "covar_samp",
    "body": "covar_samp(${1:expression}, ${2:expression})",
    "description": "The COVAR_SAMP function returns the unbiased sample covariance (n-1) of a set of number pairs."
  },
  "grouping": {
    "prefix": "grouping",
    "body": "grouping(${1:expression})",
    "description": "Used in conjunction with grouping-sets and super-groups, the GROUPING aggregate function returns a value that indicates whether a row returned in a GROUP BY answer set is a row generated by a grouping set that excludes the column represented by expression."
  },  
  "json_arrayagg": {
    "prefix": "json_arrayagg",
    "body": "json_arrayagg(${1:json-expression})",
    "description": "The JSON_ARRAYAGG function returns a JSON array containing an array element for each value in a set of JSON or SQL values."
  },
  "json_objectagg": {
    "prefix": "json_objectagg",
    "body": "json_objectagg( key ${1:key-name-expression} value ${2:json-expression})",
    "description": "The JSON_OBJECTAGG function returns a JSON object containing a key:value pair for each specific key and value in a set of SQL values."
  },        
  "listagg": {
    "prefix": "listagg",
    "body": "listagg(${1|ALL,DISTINCT|} ${2:string-expression}, ${3:separator-expression})",
    "description": "The LISTAGG function aggregates a set of string elements into one string by concatenating the strings. Optionally, a separator string can be provided which is inserted between contiguous input strings."
  }, 
  "max (aggregate)": {
    "prefix": "max",
    "body": "max(${1|ALL,DISTINCT|} ${2:expression})",
    "description": "The MAX aggregate function returns the maximum value in a set of values in a group."
  },
  "median": {
    "prefix": "median",
    "body": "median(${1:numeric-expression})",
    "description": "The MEDIAN function returns the median of a set of numbers."
  },
  "min (aggregate)": {
    "prefix": "min",
    "body": "min(${1|ALL,DISTINCT|} ${2:expression})",
    "description": "The MIN aggregate function returns the minimum value in a set of values in a group."
  },
  "percentile_cont": {
    "prefix": "percentile_cont",
    "body": "percentile_cont(${1:percentile-expression}) WITHIN GROUP (ORDER BY ${2:sort-expression})",
    "description": "The PERCENTILE_CONT function returns the value that corresponds to the specified percentile given a sort specification by using a continuous distribution model."
  },
  "percentile_disc": {
    "prefix": "percentile_disc",
    "body": "percentile_disc(${1:percentile-expression}) WITHIN GROUP (ORDER BY ${2:sort-expression})",
    "description": "The PERCENTILE_DISC function returns the value that corresponds to the specified percentile given a sort specification by using a discrete distribution model."
  },
  "regr_avgx": {
    "prefix": "regr_avgx",
    "body": "regr_avgx(${1:y-expression}, ${2:x-expression})",
    "description": "The REGR_AVGX functions return quantities that can be used to compute various diagnostic statistics needed for the evaluation of the quality and statistical validity of the regression model."
  },
  "regr_avgy": {
    "prefix": "regr_avgy",
    "body": "regr_avgy(${1:y-expression}, ${2:x-expression})",
    "description": "The REGR_AVGY functions return quantities that can be used to compute various diagnostic statistics needed for the evaluation of the quality and statistical validity of the regression model."
  },
  "regr_sxx": {
    "prefix": "regr_sxx",
    "body": "regr_sxx(${1:y-expression}, ${2:x-expression})",
    "description": "The REGR_SXX functions return quantities that can be used to compute various diagnostic statistics needed for the evaluation of the quality and statistical validity of the regression model."
  },
  "regr_sxy": {
    "prefix": "regr_sxy",
    "body": "regr_sxy(${1:y-expression}, ${2:x-expression})",
    "description": "The REGR_SXY functions return quantities that can be used to compute various diagnostic statistics needed for the evaluation of the quality and statistical validity of the regression model."
  },
  "regr_syy": {
    "prefix": "regr_syy",
    "body": "regr_syy(${1:y-expression}, ${2:x-expression})",
    "description": "The REGR_SYY functions return quantities that can be used to compute various diagnostic statistics needed for the evaluation of the quality and statistical validity of the regression model."
  },
  "regr_count": {
    "prefix": "regr_count",
    "body": "regr_count(${1:y-expression}, ${2:x-expression})",
    "description": "The REGR_COUNT function returns the number of non-null number pairs used to fit the regression line."
  },
  "regr_intercept": {
    "prefix": "regr_intercept",
    "body": "regr_intercept(${1:y-expression}, ${2:x-expression})",
    "description": "The REGR_INTERCEPT function returns the y-intercept of the regression line (\"b\" in the equation y = a * x + b)."
  },
  "regr_r2": {
    "prefix": "regr_r2",
    "body": "regr_r2(${1:y-expression}, ${2:x-expression})",
    "description": "The REGR_R2 function returns the coefficient of determination (\"R-squared\" or \"goodness-of-fit\") for the regression."
  },
  "regr_slope": {
    "prefix": "regr_slope",
    "body": "regr_slope(${1:y-expression}, ${2:x-expression})",
    "description": "The REGR_SLOPE function returns the slope of the line (\"a\" in the equation y = a * x + b)."
  },
  "stddev_pop": {
    "prefix": "stddev_pop",
    "body": "stddev_pop(${1|ALL,DISTINCT|} ${2:numeric-expression})",
    "description": "The STDDEV_POP function returns the biased standard deviation (/n) of a set of numbers."
  },
  "stddev": {
    "prefix": "stddev",
    "body": "stddev(${1|ALL,DISTINCT|} ${2:numeric-expression})",
    "description": "The STDDEV function returns the biased standard deviation (/n) of a set of numbers."
  },
  "stddev_samp": {
    "prefix": "stddev_samp",
    "body": "stddev_samp(${1|ALL,DISTINCT|} ${2:numeric-expression})",
    "description": "The STDDEV_SAMP function returns the sample standard deviation (/n-1) of a set of numbers."
  },
  "sum": {
    "prefix": "sum",
    "body": "sum(${1|ALL,DISTINCT|} ${2:numeric-expression})",
    "description": "The SUM function returns the sum of a set of numbers."
  },
  "var_pop": {
    "prefix": "var_pop",
    "body": "var_pop(${1|ALL,DISTINCT|} ${2:numeric-expression})",
    "description": "The VAR_POP function returns the biased variance (/n) of a set of numbers."
  },
  "variance": {
    "prefix": "variance",
    "body": "variance(${1|ALL,DISTINCT|} ${2:numeric-expression})",
    "description": "The VARIANCE function returns the biased variance (/n) of a set of numbers."
  },
  "var": {
    "prefix": "var",
    "body": "var(${1|ALL,DISTINCT|} ${2:numeric-expression})",
    "description": "The VAR function returns the biased variance (/n) of a set of numbers."
  },
  "var_samp": {
    "prefix": "var_samp",
    "body": "var_samp(${1|ALL,DISTINCT|} ${2:numeric-expression})",
    "description": "The VAR_SAMP function returns the sample variance (/n-1) of a set of numbers."
  },
  "variance_samp": {
    "prefix": "variance_samp",
    "body": "variance_samp(${1|ALL,DISTINCT|} ${2:numeric-expression})",
    "description": "The VARIANCE_SAMP function returns the sample variance (/n-1) of a set of numbers."
  },
  "xmlagg": {
    "prefix": "xmlagg",
    "body": "xmlagg(${1:xml-expression} ORDER BY ${2:sort-key-expression} ${3|ASC,DESC|})",
    "description": "The XMLAGG function returns an XML sequence containing an item for each non-null value in a set of XML values."
  },
  "xmlgroup": {
    "prefix": "xmlgroup",
    "body": "xmlgroup(${1:expression+})",
    "description": "The XMLGROUP function returns an XML value that is a well-formed XML document."
  }
}